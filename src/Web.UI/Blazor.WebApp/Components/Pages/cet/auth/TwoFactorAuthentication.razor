@page "/two-factor-authentication"
@using Blazor.WebApp.Models
@layout AuthLayout
@inject NavigationManager NavigationManager
@inject StateContainer StateContainer

<section id="main-site">
    <div class="glass text-center">

        <div class="title">
            <h1 class="font-poppins text-white">Two Step Verification</h1>
            <img src="images/auth/2FA.png" class="img-fluid" alt="">

            <p class="font-poppins text-light">We've sent a varification code to</p>
            <p class="font-poppins text-light">@Email</p>
        </div>

        <EditForm FormName="TwoFactorForm" Model="TwoFactorModel" OnValidSubmit="TwoFactorAuthenticationAsync"
            class="py-2">
            @if (!Errors.IsNullOrEmpty())
            {
                <div class="alert alert-danger text-start" id="@IdFrameError">
                    <FieldErrorComponent Errors="Errors" FieldName="Email_Error" IdFrame="@IdFrameError" ClassName="d-block"/>
                    <FieldErrorComponent Errors="Errors" FieldName="Code_Error" IdFrame="@IdFrameError"/>
                </div>
            }
            <h4 class="font-poppins text-light">Enter your OTP Code Here:</h4>

            <div class="col ps-1 pe-1 py-1 d-flex gap-1 border border-1 border-info rounded">
                <InputText @bind-Value="TwoFactorModel.Digit1" name="digit1" maxlength="1" type="tel"
                    class="form-control" @onpaste="HandlePaste" @oninput="@(e => MoveToNext(e, "Digit2"))"
                    id="Digit1" />
                <InputText @bind-Value="TwoFactorModel.Digit2" maxlength="1" type="tel" class="form-control"
                    @oninput="@(e => MoveToNext(e, "Digit3"))" id="Digit2" />
                <InputText @bind-Value="TwoFactorModel.Digit3" maxlength="1" type="tel" class="form-control"
                    @oninput="@(e => MoveToNext(e, "Digit4"))" id="Digit3" />
                <InputText @bind-Value="TwoFactorModel.Digit4" maxlength="1" type="tel" class="form-control"
                    @oninput="@(e => MoveToNext(e, "Digit5"))" id="Digit4" />
                <InputText @bind-Value="TwoFactorModel.Digit5" maxlength="1" type="tel" class="form-control"
                    @oninput="@(e => MoveToNext(e, "Digit6"))" id="Digit5" />
                <InputText @bind-Value="TwoFactorModel.Digit6" maxlength="1" type="tel" class="form-control"
                    id="Digit6" />
                <ValidationMessage For="@(() => TwoFactorModel.Code)" />
            </div>

            <div class="col">
                <button type="submit" class="btn mt-2 mb-2">Verify</button>
            </div>

            <div class="py-1">
                <p class="font-poppins text-light">Not received your code?</p>
                <p class="font-poppins text-light"><a href="" class="link">Resend</a> OR <a href="#" class="link"> Call
                    </a></p>
            </div>
        </EditForm>
    </div>
</section>

<link rel="stylesheet" href="css/auth/2fa.css">


@code {
    private TwoFactorModel TwoFactorModel { get; set; } = new();
    [Parameter] public string Email { get; set; } = string.Empty;
    private List<ErrorDetail> Errors = new();
    private string IdFrameError = "frame-error-verify";

    protected override async Task OnParametersSetAsync()
    {
        var fullUrl = NavigationManager.Uri;
        Email = QueryStringHelper.GetQueryParameter(fullUrl, "email", email => email) ?? string.Empty;
        TwoFactorModel.Email = Email;
        var message = StateContainer.GetMessage();
        if (!string.IsNullOrWhiteSpace(message))
        {
            _toastService.ShowInfo(message);
        }
        await base.OnParametersSetAsync();
    }

    private async Task TwoFactorAuthenticationAsync()
    {
        var fullCode = TwoFactorModel.GetFullCode();
        var response = await ApiClient.PostAsync<ConfirmTwoFactorAuthenticationRequestDto, LoginResponseDto>(
        uri: "api/v1/cet/auth/confirmtwofactor",
        data: new ConfirmTwoFactorAuthenticationRequestDto() { Code = fullCode, Email = Email });
        if (response != null)
        {
            var errorMessage = ToastHelper.ErrorMessage(response);
            if (string.IsNullOrEmpty(errorMessage))
            {
                Errors = response.Errors ?? new();
            }
            if (response.Success)
            {
                // save new tokens to localstorage

                // redirect user to currently page requested
            }
            else
            {
                if (!string.IsNullOrEmpty(errorMessage))
                {
                    _toastService.ShowError(errorMessage);
                }
            }
        }
        await Task.CompletedTask;
    }
    private async Task HandlePaste(ClipboardEventArgs e)
    {
        var clipboardText = await GetClipboardTextAsync();
        if (clipboardText.Length == 6)
        {
            TwoFactorModel.Digit1 = clipboardText[0].ToString();
            TwoFactorModel.Digit2 = clipboardText[1].ToString();
            TwoFactorModel.Digit3 = clipboardText[2].ToString();
            TwoFactorModel.Digit4 = clipboardText[3].ToString();
            TwoFactorModel.Digit5 = clipboardText[4].ToString();
            TwoFactorModel.Digit6 = clipboardText[5].ToString();
        }
    }
    private async Task<string> GetClipboardTextAsync()
    {
        var clipboardText = await _jsRuntime.InvokeAsync<string>("navigator.clipboard.readText");
        return clipboardText;
    }

    private async Task MoveToNext(ChangeEventArgs e, string nextElementId)
    {
        if (!string.IsNullOrEmpty(e.Value?.ToString()))
        {
            await _jsRuntime.InvokeVoidAsync("moveToNext", nextElementId);
        }
    }
}