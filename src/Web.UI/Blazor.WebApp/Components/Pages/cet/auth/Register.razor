@page "/register"
@using Blazor.WebApp.Components.Errors
@layout AuthLayout
@inject ApiClient ApiClient
@rendermode InteractiveServer

<EditForm Model="RegisterRequestDto" OnValidSubmit="RegisterUserAsync" FormName="registerForm">
    <DataAnnotationsValidator />
    @* <ValidationSummary /> *@

    <div class="mb-3">
        <label>Full Name</label>
        <InputText id="fullName" @bind-Value="RegisterRequestDto.FullName" class="form-control" />
        <ValidationMessage For="@(() => RegisterRequestDto.FullName)" />
        <FieldErrorComponent Errors="errors" FieldName="FullName_Error" />
    </div>

    <div class="mb-3">
        <label>Email</label>
        <InputText id="email" @bind-Value="RegisterRequestDto.Email" class="form-control" />
        <ValidationMessage For="@(() => RegisterRequestDto.Email)" />
        <FieldErrorComponent Errors="errors" FieldName="Email_Error" />
    </div>

    <div class="mb-3">
        <label>Password</label>
        <InputText id="password" @bind-Value="RegisterRequestDto.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => RegisterRequestDto.Password)" />
        <FieldErrorComponent Errors="errors" FieldName="Password_Error" />
    </div>

    <div class="mb-3">
        <label>Confirm Password</label>
        <InputText id="confirmPassword" @bind-Value="RegisterRequestDto.ConfirmPassword" class="form-control"
            type="password" />
        <ValidationMessage For="@(() => RegisterRequestDto.ConfirmPassword)" />
        <FieldErrorComponent Errors="errors" FieldName="ConfirmPassword_Error" />
    </div>

    <button type="submit" class="btn btn-outline-primary">Register</button>
</EditForm>


@if (isLoading)
{
    <Blazor.WebApp.Components.Spinners.LoadingApi />
}

@if (ToastModel.IsVisible == true)
{
    <Blazor.WebApp.Components.Toasts.Toast ToastModel=ToastModel />
}

@code {
    private RegisterRequestDto RegisterRequestDto { get; set; } = new();
    private List<ErrorDetail> errors = new();
    private ToastModel ToastModel = new();
    private bool isLoading = false;

    private async Task RegisterUserAsync()
    {
        isLoading = true;
        var response = await ApiClient.PostAsync<RegisterRequestDto, RegisterResponsetDto>(
            uri: "api/v1/cet/auth/register", data: RegisterRequestDto);

        errors = response?.Errors ?? new();

        isLoading = false;

        if (response != null && response.Success)
        {
            // Handle success (e.g., navigate or display success message)
        }
        else
        {
            ToastHelper.ToastError<RegisterResponsetDto>(response: response,
                model: ToastModel, toastType: CToastType.Error);
        }
    }
}