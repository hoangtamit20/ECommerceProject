@page "/register"
@using Blazor.WebApp.Components.Errors
@layout AuthLayout
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>

<section class="vh-100">
    <div class="container h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-lg-12 col-xl-11">
                <div class="card text-black" style="border-radius: 25px; background-color: rgba(255, 255, 255, 0.49);">
                    <div class="card-body p-md-5">
                        <div class="row justify-content-center">
                            <div class="col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1">

                                <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">Sign up</p>

                                <EditForm Model="RegisterRequestDto" OnValidSubmit="RegisterUserAsync"
                                    FormName="registerForm" class="mx-1 mx-md-4">
                                    <DataAnnotationsValidator />
                                    <!-- Full Name Input -->
                                    <div class="mb-3">
                                        <label for="fullName" class="form-label text-secondary">Full Name <span
                                            class="text-danger">*</span></label>
                                        <div class="input-group">
                                            <span class="input-group-text bg-white"><i class="bi bi-person text-primary fw-bold"></i></span>
                                            <InputText id="fullName" @bind-Value="RegisterRequestDto.FullName"
                                                class="form-control" placeholder="Enter your full name" />
                                        </div>
                                        <ValidationMessage For="@(() => RegisterRequestDto.FullName)" />
                                        <FieldErrorComponent Errors="Errors" FieldName="FullName_Error" />
                                    </div>

                                    <!-- Email Input -->
                                    <div class="mb-3">
                                        <label for="email" class="form-label text-secondary">Email <span
                                            class="text-danger">*</span></label>
                                        <div class="input-group">
                                            <span class="input-group-text bg-white"><i class="bi bi-envelope text-primary fw-bold"></i></span>
                                            <InputText id="email" @bind-Value="RegisterRequestDto.Email"
                                                class="form-control" placeholder="Enter your email" />
                                        </div>
                                        <ValidationMessage For="@(() => RegisterRequestDto.Email)" />
                                        <FieldErrorComponent Errors="Errors" FieldName="Email_Error" />
                                    </div>

                                    <!-- Password Input -->
                                    <div class="mb-3">
                                        <label for="password" class="form-label text-secondary">Password <span
                                            class="text-danger">*</span></label>
                                        <div class="input-group">
                                            <span class="input-group-text bg-white"><i class="bi bi-lock text-primary fw-bold"></i></span>
                                            <InputText id="password" @bind-Value="RegisterRequestDto.Password"
                                                class="form-control" type="password" placeholder="Enter your password" />
                                        </div>
                                        <ValidationMessage For="@(() => RegisterRequestDto.Password)" />
                                        <FieldErrorComponent Errors="Errors" FieldName="Password_Error" />
                                    </div>

                                    <!-- Confirm Password Input -->
                                    <div class="mb-3">
                                        <label for="confirmPassword" class="form-label text-secondary">Confirm Password <span
                                            class="text-danger">*</span></label>
                                        <div class="input-group">
                                            <span class="input-group-text bg-white"><i class="bi bi-lock text-primary fw-bold"></i></span>
                                            <InputText id="confirmPassword"
                                                @bind-Value="RegisterRequestDto.ConfirmPassword" class="form-control"
                                                type="password" placeholder="Repeat your password" />
                                        </div>
                                        <ValidationMessage For="@(() => RegisterRequestDto.ConfirmPassword)" />
                                        <FieldErrorComponent Errors="Errors" FieldName="ConfirmPassword_Error" />
                                    </div>

                                    <!-- Terms of Service -->
                                    <div class="form-check d-flex justify-content-center mb-3">
                                        <input class="form-check-input me-2" type="checkbox" value=""
                                            id="termsOfService" />
                                        <label class="form-check-label" for="termsOfService">
                                            I agree all statements in <a href="#!">Terms of service</a>
                                        </label>
                                    </div>

                                    <!-- Register Button -->
                                    <div class="d-flex justify-content-center mx-4 mb-3 mb-lg-4">
                                        <button type="submit" data-mdb-button-init data-mdb-ripple-init
                                            class="btn btn-primary btn-lg">Register</button>
                                    </div>
                                    <div class="text-center">
                                        <p class="mb-0">Already have an account? <a href="/login" class="text-primary">Back to login</a></p>
                                    </div>

                                </EditForm>

                            </div>
                            <div class="col-md-10 col-lg-6 col-xl-7 d-flex align-items-center order-1 order-lg-2">

                                <img src="images/auth/Register.png"
                                    class="img-fluid" alt="Sample image">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@if (LoadingStatus.IsLoading)
{
    <Blazor.WebApp.Components.Spinners.LoadingApi />
}

@code {
    private RegisterRequestDto RegisterRequestDto { get; set; } = new();
    private List<ErrorDetail> Errors = new();
    private CLoadingStatus LoadingStatus { get; set; } = new();

    private async Task RegisterUserAsync()
    {
        try
        {
            LoadingStatus.IsLoading = true;
            var response = await ApiClient.PostAsync<RegisterRequestDto, ResultMessage>(
            uri: APIEndpoint.CET_Auth_Register, data: RegisterRequestDto);

            Errors = response?.Errors ?? new();

            LoadingStatus.IsLoading = false;

            if (response != null && response.Success)
            {
                // Handle success (e.g., navigate or display success message)
                var queryString = LinkHelper.ToQueryString<ResultMessage>(obj: response.Data ?? new());
                NavigationManager.NavigateTo(uri: $"/notification-summary/?{queryString}");
            }
            else
            {
                _toastService.ShowError(message: ToastHelper.ErrorMessage<ResultMessage>(response: response));
            }
        }
        catch (Exception ex)
        {
            LoadingStatus.IsLoading = false;
            _toastService.ShowError(ex.Message);
        }
    }
}