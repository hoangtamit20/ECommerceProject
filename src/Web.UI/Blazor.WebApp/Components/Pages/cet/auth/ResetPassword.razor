@page "/reset-password"
@inject NavigationManager NavigationManager
@layout AuthLayout
@inject StateContainer StateContainer

<PageTitle>Reset Password</PageTitle>

<section class="vh-100">
    <div class="container h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-lg-12 col-xl-11">
                <div class="card text-black" style="border-radius: 25px; background-color: rgba(255, 255, 255, 0.49);">
                    <div class="card-body p-md-5">
                        <div class="row justify-content-center">
                            <div class="col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1">

                                <p class="text-center h1 fw-bold mb-4 mx-1 mx-md-4 mt-4">Request Password Reset</p>
                                <div class="reset-password-instructions text-secondary card-text mb-4">
                                    <p style="text-align: justify; text-justify: inter-word;">1. Please enter your registered email address to receive a password reset link. Make
                                        sure the email you provide is correct. If the email is associated with an
                                        account, you will receive further instructions on how to reset your password.
                                    </p>

                                    <p style="text-align: justify; text-justify: inter-word;">2. If you do not receive the email, check your spam folder or try again. Contact
                                        support if you continue to experience issues.</p>
                                </div>

                                <EditForm FormName="ResetPasswordForm" Model="ResetPasswordModel"
                                    OnValidSubmit="ResetPasswordAsync" class="mx-1 mx-md-4">
                                    <DataAnnotationsValidator />
                                    <!-- Email Input -->
                                    <div class="mb-4">
                                        <div class="input-group">
                                            <span class="input-group-text bg-white"><i
                                                    class="bi bi-envelope text-primary fw-bold"></i></span>
                                            <InputText id="email" @bind-Value="ResetPasswordModel.Email"
                                                class="form-control" placeholder="Enter your email" />
                                        </div>
                                        <ValidationMessage For="@(() => ResetPasswordModel.Email)" />
                                        <FieldErrorComponent Errors="Errors" FieldName="Email_Error" />
                                    </div>

                                    <!-- Register Button -->
                                    <div class="d-flex justify-content-center mx-4 mb-3 mb-lg-4">
                                        <button type="submit" data-mdb-button-init data-mdb-ripple-init
                                            class="btn btn-primary btn-lg">Reset Password</button>
                                    </div>

                                </EditForm>

                            </div>
                            <div class="col-md-10 col-lg-6 col-xl-7 d-flex align-items-center order-1 order-lg-2">

                                <img src="images/auth/ResetPassword.png" class="img-fluid" alt="Sample image">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<link rel="stylesheet" href="css/notification/notificationsummary.css">

@if (LoadingStatus.IsLoading)
{
    <Blazor.WebApp.Components.Spinners.LoadingApi />
}

@code
{
    private ResetPasswordRequestDto ResetPasswordModel { get; set; } = new();
    private CLoadingStatus LoadingStatus { get; set; } = new();
    private List<ErrorDetail> Errors { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        await AuthenticationHelper.AuthenticationAsync(loadingStatus: LoadingStatus, apiClient: ApiClient,
            stateContainer: StateContainer, navigationManager: NavigationManager,
            localStorage: _localStorage, toastService: _toastService);
    }

    private async Task ResetPasswordAsync()
    {
        try
        {
            LoadingStatus.IsLoading = true;
            var response = await ApiClient.PostAsync<ResetPasswordRequestDto, ResultMessage>(
            uri: APIEndpoint.CET_Auth_ResetPassword, data: ResetPasswordModel,
            requestType: CRequestType.Public);
            LoadingStatus.IsLoading = false;
            Errors = response?.Errors ?? new();
            if (response != null)
            {
                if (response.Success)
                {
                    string queryString = QueryStringHelper.ToQueryString<ResultMessage>(response.Data ?? new());
                    NavigationManager.NavigateTo($"/notification-summary/?{queryString}");
                }
                else
                {
                    var errorMessage = ToastHelper.ErrorMessage<ResultMessage>(response: response);
                    if (!string.IsNullOrEmpty(errorMessage))
                    {
                        _toastService.ShowError(errorMessage);
                    }
                }
            }
            else
            {
                _toastService.ShowError($"An error occured while send request to reset password");
            }
        }
        catch (Exception ex)
        {
            LoadingStatus.IsLoading = false;
            _toastService.ShowError(ex.Message);
        }
        await Task.CompletedTask;
    }
}