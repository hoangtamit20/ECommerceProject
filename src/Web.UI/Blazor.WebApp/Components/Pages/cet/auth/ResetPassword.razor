@page "/reset-password"
@inject NavigationManager NavigationManager
@layout AuthLayout
@inject StateContainer StateContainer


<div class="container">
    <div class="box">
        <div class="row">

        </div>
        <EditForm FormName="ResetPasswordForm" Model="ResetPasswordModel" OnValidSubmit="ResetPasswordAsync">
            <DataAnnotationsValidator />
            <div class="row mb-4 mx-3" style="max-height: 400px;">
                <div class="col-10">
                    <img src="images/auth/ResetPassword.jpg"  width="100%" height="100%" alt="" class="rounded-2">
                </div>
            </div>

            <div class="row gy-3 mx-3 mb-2 gy-md-4 overflow-hidden">
                <div class="col-auto">
                    <label for="email" class="form-label">Email <span
                            class="text-danger">*</span></label>
                    <InputText id="email" @bind-Value="ResetPasswordModel.Email" class="form-control" />
                    <ValidationMessage For="@(() => ResetPasswordModel.Email)" />
                    <FieldErrorComponent Errors="Errors" FieldName="Email_Error" />
                </div>
            </div>
            <div class="row mx-3 gy-3 gy-md-4 overflow-hidden d-flex">
                <div class="col-auto">
                    <button type="submit" class="btn btn-outline-primary">Sumbit</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

<link rel="stylesheet" href="css/notification/notificationsummary.css">

@if (LoadingStatus.IsLoading)
{
    <Blazor.WebApp.Components.Spinners.LoadingApi />
}

@code
{
    private ResetPasswordRequestDto ResetPasswordModel { get; set; } = new();
    private CLoadingStatus LoadingStatus { get; set; } = new();
    private List<ErrorDetail> Errors { get; set; } = new();


    private async Task ResetPasswordAsync()
    {
        try
        {
            LoadingStatus.IsLoading = true;
            var response = await ApiClient.PostAsync<ResetPasswordRequestDto, ResultMessage>(
            uri: APIEndpoint.CET_Auth_ResetPassword, data: ResetPasswordModel,
            requestType: CRequestType.Public);
            LoadingStatus.IsLoading = false;
            if (response != null)
            {
                if (response.Success)
                {
                    string queryString = QueryStringHelper.ToQueryString<ResultMessage>(response.Data ?? new());
                    NavigationManager.NavigateTo($"/notification-summary/?{queryString}");
                }
                else
                {
                    var errorMessage = ToastHelper.ErrorMessage<ResultMessage>(response: response);
                    if (!string.IsNullOrEmpty(errorMessage))
                    {
                        _toastService.ShowError(errorMessage);
                    }
                }
            }
            else
            {
                _toastService.ShowError($"An error occured while send request to reset password");
            }
        }
        catch (Exception ex)
        {
            LoadingStatus.IsLoading = false;
            _toastService.ShowError(ex.Message);
        }
        await Task.CompletedTask;
    }
}