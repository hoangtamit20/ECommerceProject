@page "/notification-summary"
@layout AuthLayout
@inject NavigationManager NavigationManager

<PageTitle>Notification</PageTitle>

@if (ResultMessageParameter != null && !string.IsNullOrEmpty(ResultMessageParameter.Message))
{
	<div class="container">
		<div class="box">
			<div class="row mb-4">
				<h1 class="">Notification</h1>
			</div>
			<div class="row mb-4">
				<div class="col-12 d-flex justify-content-center align-items-center">
					<div id="lottie-animation" style="width: 100%; height: 70%;"></div>
				</div>
			</div>
			<div class="row mb-4">
				<h2 class="">@ResultMessageParameter.NotificationType.ToDescription()
					@ResultMessageParameter.Level.ToDescription()</h2>
				<p class="">@ResultMessageParameter.Message</p>
			</div>
			<div class="row d-flex justify-content-center">
				<div class="col-auto">
					<!-- Nút với biểu tượng và tiêu đề -->
					<button class="btn btn-outline-secondary" @onclick="CloseTabAsync">
						<i class="bi bi-arrow-return-left"></i> Back to Login
					</button>
				</div>
			</div>
		</div>
	</div>
}
else
{
	_toastService.ShowError("You don't permission to access this page.");
}

<link rel="stylesheet" href="css/notification/notificationsummary.css">


@code
{
	private ResultMessage ResultMessageParameter { get; set; } = new();
	private CLoadingStatus LoadingStatus { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		ResultMessageParameter = QueryStringHelper.GetQueryParameters<ResultMessage>(NavigationManager);
		await Task.CompletedTask;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		@* if (firstRender)
		{
			// Dynamically load the lottiebase.js script
			await _jsRuntime.InvokeVoidAsync("eval", "var script = document.createElement('script'); script.src = 'animations/lotties/js/lottiebase.js'; document.head.appendChild(script);");

			// Give the script some time to load (adjust timing as needed)
			await Task.Delay(500);

			// Call the animation function after the script is loaded
			await JavaScriptHelper.AnimationIconResultPageAsync(message: ResultMessageParameter, jsRuntime: _jsRuntime);
		} *@
		await JavaScriptHelper.AnimationIconResultPageAsync(message: ResultMessageParameter, jsRuntime: _jsRuntime);
		await Task.CompletedTask;
	}

	private async Task CloseTabAsync()
	{
		try
		{
			NavigationManager.NavigateTo(uri: "/login");
		}
		catch (Exception ex)
		{
			_toastService.ShowError(ex.Message);
		}
		await Task.CompletedTask;
	}
}
