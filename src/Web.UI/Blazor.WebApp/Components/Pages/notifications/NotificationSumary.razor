@page "/notification-summary"
@layout AuthLayout
@inject NavigationManager NavigationManager
@if (ResultMessageParameter != null && !string.IsNullOrEmpty(ResultMessageParameter.Message))
{
	<div class="container">
		<div class="box">
			<div class="row mb-4">
				<h1 class="">Notification</h1>
			</div>
			<div class="row mb-4">
				<div class="col-12 d-flex justify-content-center align-items-center">
					<h1>Success icon : </h1>
					<div id="lottie-animation" style="width: 100%; height: 70%;"></div>
				</div>
			</div>
			<div class="row mb-4">
				<h2 class="">@ResultMessageParameter.NotificationType.ToDescription()
					@ResultMessageParameter.Level.ToDescription()</h2>
				<p class="">@ResultMessageParameter.Message</p>
			</div>
			<div class="row d-flex justify-content-center">
				<div class="col-auto">
					<!-- Nút với biểu tượng và tiêu đề -->
					<button class="btn btn-outline-secondary" @onclick="CloseTabAsync">
						<i class="bi bi-arrow-return-left"></i> Back to Login
					</button>
				</div>
			</div>
		</div>
	</div>
	<script src="animations/lotties/js/lottiebase.js"></script>
}
else
{
	_toastService.ShowError("You don't permission to access this page.");

}

@(LoadingStatus.IsLoading)
{
<Blazor.WebApp.Components.Spinners.LoadingApi />
}

<link rel="stylesheet" href="css/notification/notificationsummary.css">


@code
{
	private ResultMessage ResultMessageParameter { get; set; } = new();
	private string AnimationJsonFile { get; set; } = string.Empty;
	private CLoadingStatus LoadingStatus { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		ResultMessageParameter = QueryStringHelper.GetQueryParameters<ResultMessage>(NavigationManager);
		await Task.CompletedTask;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!string.IsNullOrEmpty(ResultMessageParameter.Message) && ResultMessageParameter.Level != CNotificationLevel.None
		&& ResultMessageParameter.Level != CNotificationLevel.None)
		{
			var isFunctionAvailable = false;
			while (isFunctionAvailable)
			{
				await Task.Delay(1);
				isFunctionAvailable = await _jsRuntime.InvokeAsync<bool>("eval", "typeof loadLottieAnimation === 'function'");
				Console.WriteLine(isFunctionAvailable);
				LoadingStatus.IsLoading = false;
			}
			if (isFunctionAvailable)
			{
				if (!string.IsNullOrEmpty(ResultMessageParameter.Message) && ResultMessageParameter.Level != CNotificationLevel.None)
				{
					if (ResultMessageParameter.Level == CNotificationLevel.Success)
					{
						AnimationJsonFile = ResultMessageParameter.NotificationType == CNotificationType.Normal
						? "success.json"
						: "sendemailsuccess.json";
					}
					else
					{
						AnimationJsonFile = "success.json";
					}

					await _jsRuntime.InvokeVoidAsync("loadLottieAnimation", AnimationJsonFile);
				}
			}
		}
		else
		{

		}
		await Task.CompletedTask;
	}

	private async Task CloseTabAsync()
	{
		try
		{
			NavigationManager.NavigateTo(uri: "/login");
		}
		catch (Exception ex)
		{
			_toastService.ShowError(ex.Message);
		}
		await Task.CompletedTask;
	}
}
