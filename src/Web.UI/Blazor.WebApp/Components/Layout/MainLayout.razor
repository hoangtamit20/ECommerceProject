@inherits LayoutComponentBase
@inject StateContainer StateContainer
@inject NavigationManager NavigationManager

<div class="page">
    <main>
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container-fluid mx-4">
                <a class="navbar-brand" href="#">Ecommerce</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                Danh mục
                            </a>
                            <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                                <li><a class="dropdown-item" href="#">Danh mục 1</a></li>
                                <li>
                                    <a class="dropdown-item dropdown-toggle" href="#" id="submenu1" role="button"
                                        data-bs-toggle="dropdown" aria-expanded="false">
                                        Danh mục 2
                                    </a>
                                    <ul class="dropdown-menu" aria-labelledby="submenu1">
                                        <li><a class="dropdown-item" href="#">Danh mục 2.1</a></li>
                                        <li><a class="dropdown-item" href="#">Danh mục 2.2</a></li>
                                    </ul>
                                </li>
                                <li><a class="dropdown-item" href="#">Danh mục 3</a></li>
                            </ul>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">Giới thiệu</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">Liên hệ</a>
                        </li>
                    </ul>
                    <form class="d-flex ms-3" role="search">
                        <input class="form-control me-2" type="search" placeholder="Tìm kiếm" aria-label="Search">
                        <button class="btn btn-outline-success" type="submit">Tìm kiếm</button>
                    </form>
                    <div class="ms-3">
                        @if (IsAuthentication)
                        {
                            <button @onclick="LogOutAsync" class="btn btn-outline-secondary"><i
                                    class="bi bi-box-arrow-right me-2"></i>Log out</button>
                            <div id="user-info-logged-in" style="display: none;">
                                <a class="btn btn-outline-secondary" href="#">Thông tin</a>
                                <a class="btn btn-outline-secondary ms-2" href="#">Đăng xuất</a>
                            </div>
                        }
                        else
                        {
                            <div id="user-info">
                                <a class="btn btn-primary" href="/login">Đăng nhập</a>
                                <a class="btn btn-secondary ms-2" href="/register">Đăng ký</a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </nav>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<BlazoredToasts Position="ToastPosition.TopRight" Timeout="10" ShowProgressBar="true" IconType="IconType.Blazored"
    SuccessIcon="bi bi-hand-thumbs-up" WarningIcon="bi bi-exclamation-triangle" InfoIcon="bi bi-info-circle"
    ErrorIcon="bi bi-bug" />

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@if (LoadingStatus.IsLoading)
{
    <Blazor.WebApp.Components.Spinners.LoadingApi />
}




@code
{
    private CLoadingStatus LoadingStatus { get; set; } = new();
    private bool IsAuthentication { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsAuthentication = await AuthenticationHelper.IsAuthenticationAsync(ApiClient, _localStorage);
        }
        catch (Exception ex)
        {
            _toastService.ShowError(ex.Message);
        }
        await Task.CompletedTask;
    }

    private async Task LogOutAsync()
    {
        try
        {
            LoadingStatus.IsLoading = true;
            var response = await ApiClient.PostAsync<bool, ResultMessage>(uri: APIEndpoint.CET_Auth_LogOut,
            data: false, requestType: CRequestType.Private);
            LoadingStatus.IsLoading = false;
            if (response != null)
            {
                if (response.Success)
                {
                    if (response.Data != null)
                    {
                        StateContainer.Message = response.Data.Message;
                        await _localStorage.RemoveTokenAsync();
                        NavigationManager.NavigateTo(uri: "/login");
                    }
                    else
                    {
                        _toastService.ShowWarning(message: response.Errors.Select(err =>
                        err.Error).ToList().ToMultilineString());
                    }
                }
                else
                {
                    _toastService.ShowError(message: response.Errors.Select(err =>
                    err.Error).ToList().ToMultilineString());
                }
            }
        }
        catch (Exception ex)
        {
            LoadingStatus.IsLoading = false;
            _toastService.ShowError(ex.Message);
        }
        await Task.CompletedTask;
    }
}
